<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Hospital Management System</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            color: #333;
        }

        .container {
            max-width: 1400px;
            margin: 0 auto;
            padding: 20px;
        }

        .header {
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(10px);
            border-radius: 15px;
            padding: 20px;
            margin-bottom: 30px;
            text-align: center;
            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
        }

        .header h1 {
            color: #2c3e50;
            font-size: 2.5em;
            margin-bottom: 10px;
        }

        .nav-tabs {
            display: flex;
            justify-content: center;
            gap: 10px;
            margin-top: 20px;
            flex-wrap: wrap;
        }

        .tab-btn {
            background: linear-gradient(45deg, #3498db, #2980b9);
            color: white;
            border: none;
            padding: 12px 20px;
            border-radius: 25px;
            cursor: pointer;
            font-weight: 600;
            transition: all 0.3s ease;
            box-shadow: 0 4px 15px rgba(52, 152, 219, 0.3);
        }

        .tab-btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 6px 20px rgba(52, 152, 219, 0.4);
        }

        .tab-btn.active {
            background: linear-gradient(45deg, #e74c3c, #c0392b);
            box-shadow: 0 4px 15px rgba(231, 76, 60, 0.3);
        }

        .tab-content {
            display: none;
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(10px);
            padding: 30px;
            border-radius: 15px;
            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
            animation: fadeIn 0.5s ease-in;
        }

        .tab-content.active {
            display: block;
        }

        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(20px); }
            to { opacity: 1; transform: translateY(0); }
        }

        .form-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
            gap: 20px;
            margin-bottom: 20px;
        }

        .form-group {
            display: flex;
            flex-direction: column;
        }

        .form-group label {
            margin-bottom: 5px;
            font-weight: 600;
            color: #2c3e50;
        }

        .form-group input, .form-group select, .form-group textarea {
            padding: 12px;
            border: 2px solid #e0e0e0;
            border-radius: 8px;
            font-size: 14px;
            transition: border-color 0.3s ease;
        }

        .form-group input:focus, .form-group select:focus, .form-group textarea:focus {
            outline: none;
            border-color: #3498db;
            box-shadow: 0 0 0 3px rgba(52, 152, 219, 0.1);
        }

        .btn {
            background: linear-gradient(45deg, #27ae60, #2ecc71);
            color: white;
            border: none;
            padding: 12px 25px;
            border-radius: 25px;
            cursor: pointer;
            font-weight: 600;
            transition: all 0.3s ease;
            box-shadow: 0 4px 15px rgba(39, 174, 96, 0.3);
            margin: 5px;
        }

        .btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 6px 20px rgba(39, 174, 96, 0.4);
        }

        .btn-danger {
            background: linear-gradient(45deg, #e74c3c, #c0392b);
            box-shadow: 0 4px 15px rgba(231, 76, 60, 0.3);
        }

        .btn-danger:hover {
            box-shadow: 0 6px 20px rgba(231, 76, 60, 0.4);
        }

        .data-table {
            width: 100%;
            border-collapse: collapse;
            margin-top: 20px;
            background: white;
            border-radius: 10px;
            overflow: hidden;
            box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);
        }

        .data-table th, .data-table td {
            padding: 12px;
            text-align: left;
            border-bottom: 1px solid #eee;
        }

        .data-table th {
            background: linear-gradient(45deg, #34495e, #2c3e50);
            color: white;
            font-weight: 600;
        }

        .data-table tr:hover {
            background-color: #f8f9fa;
        }

        .search-box {
            width: 100%;
            padding: 12px;
            border: 2px solid #e0e0e0;
            border-radius: 25px;
            font-size: 14px;
            margin-bottom: 20px;
            transition: border-color 0.3s ease;
        }

        .search-box:focus {
            outline: none;
            border-color: #3498db;
            box-shadow: 0 0 0 3px rgba(52, 152, 219, 0.1);
        }

        .status-badge {
            padding: 4px 12px;
            border-radius: 15px;
            font-size: 12px;
            font-weight: 600;
            text-transform: uppercase;
        }

        .status-active { background: #d4edda; color: #155724; }
        .status-scheduled { background: #cce7ff; color: #004085; }
        .status-completed { background: #f8d7da; color: #721c24; }

        .stats-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 20px;
            margin-bottom: 30px;
        }

        .stat-card {
            background: linear-gradient(45deg, #fff, #f8f9fa);
            padding: 20px;
            border-radius: 15px;
            text-align: center;
            box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);
            border-left: 4px solid #3498db;
        }

        .stat-card h3 {
            font-size: 2em;
            color: #2c3e50;
            margin-bottom: 10px;
        }

        .stat-card p {
            color: #7f8c8d;
            font-weight: 600;
        }

        .modal {
            display: none;
            position: fixed;
            z-index: 1000;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.5);
            backdrop-filter: blur(5px);
        }

        .modal-content {
            background-color: white;
            margin: 5% auto;
            padding: 30px;
            border-radius: 15px;
            width: 90%;
            max-width: 500px;
            box-shadow: 0 10px 40px rgba(0, 0, 0, 0.2);
            animation: slideIn 0.3s ease-out;
        }

        @keyframes slideIn {
            from { transform: translateY(-50px); opacity: 0; }
            to { transform: translateY(0); opacity: 1; }
        }

        .close {
            color: #aaa;
            float: right;
            font-size: 28px;
            font-weight: bold;
            cursor: pointer;
        }

        .close:hover {
            color: #e74c3c;
        }

        @media (max-width: 768px) {
            .form-grid {
                grid-template-columns: 1fr;
            }
            .nav-tabs {
                flex-direction: column;
                align-items: center;
            }
            .tab-btn {
                width: 100%;
                max-width: 200px;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>üè• Hospital Management System</h1>
            <p>Comprehensive Healthcare Database Management</p>
            
            <div class="nav-tabs">
                <button class="tab-btn active" onclick="showTab('dashboard')">Dashboard</button>
                <button class="tab-btn" onclick="showTab('patients')">Patients</button>
                <button class="tab-btn" onclick="showTab('doctors')">Doctors</button>
                <button class="tab-btn" onclick="showTab('appointments')">Appointments</button>
                <button class="tab-btn" onclick="showTab('records')">Medical Records</button>
                <button class="tab-btn" onclick="showTab('sql')">SQL Console</button>
            </div>
        </div>

        <!-- Dashboard Tab -->
        <div id="dashboard" class="tab-content active">
            <h2>Dashboard Overview</h2>
            <div class="stats-grid">
                <div class="stat-card">
                    <h3 id="totalPatients">0</h3>
                    <p>Total Patients</p>
                </div>
                <div class="stat-card">
                    <h3 id="totalDoctors">0</h3>
                    <p>Total Doctors</p>
                </div>
                <div class="stat-card">
                    <h3 id="totalAppointments">0</h3>
                    <p>Total Appointments</p>
                </div>
                <div class="stat-card">
                    <h3 id="todayAppointments">0</h3>
                    <p>Today's Appointments</p>
                </div>
            </div>
            
            <h3>Recent Activities</h3>
            <div id="recentActivities">
                <p>Welcome to the Hospital Management System. Use the tabs above to manage patients, doctors, appointments, and medical records.</p>
            </div>
        </div>

        <!-- Patients Tab -->
        <div id="patients" class="tab-content">
            <h2>Patient Management</h2>
            
            <div class="form-grid">
                <div class="form-group">
                    <label for="patientName">Full Name</label>
                    <input type="text" id="patientName" placeholder="Enter patient name">
                </div>
                <div class="form-group">
                    <label for="patientAge">Age</label>
                    <input type="number" id="patientAge" placeholder="Enter age">
                </div>
                <div class="form-group">
                    <label for="patientGender">Gender</label>
                    <select id="patientGender">
                        <option value="">Select Gender</option>
                        <option value="Male">Male</option>
                        <option value="Female">Female</option>
                        <option value="Other">Other</option>
                    </select>
                </div>
                <div class="form-group">
                    <label for="patientPhone">Phone</label>
                    <input type="tel" id="patientPhone" placeholder="Enter phone number">
                </div>
                <div class="form-group">
                    <label for="patientEmail">Email</label>
                    <input type="email" id="patientEmail" placeholder="Enter email">
                </div>
                <div class="form-group">
                    <label for="patientAddress">Address</label>
                    <textarea id="patientAddress" placeholder="Enter address" rows="3"></textarea>
                </div>
            </div>
            
            <button class="btn" onclick="addPatient()">Add Patient</button>
            
            <input type="text" id="patientSearch" class="search-box" placeholder="Search patients..." oninput="searchPatients()">
            
            <table class="data-table" id="patientsTable">
                <thead>
                    <tr>
                        <th>ID</th>
                        <th>Name</th>
                        <th>Age</th>
                        <th>Gender</th>
                        <th>Phone</th>
                        <th>Email</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody id="patientsTableBody">
                </tbody>
            </table>
        </div>

        <!-- Doctors Tab -->
        <div id="doctors" class="tab-content">
            <h2>Doctor Management</h2>
            
            <div class="form-grid">
                <div class="form-group">
                    <label for="doctorName">Full Name</label>
                    <input type="text" id="doctorName" placeholder="Enter doctor name">
                </div>
                <div class="form-group">
                    <label for="doctorSpecialty">Specialty</label>
                    <select id="doctorSpecialty">
                        <option value="">Select Specialty</option>
                        <option value="Cardiology">Cardiology</option>
                        <option value="Neurology">Neurology</option>
                        <option value="Orthopedics">Orthopedics</option>
                        <option value="Pediatrics">Pediatrics</option>
                        <option value="Dermatology">Dermatology</option>
                        <option value="General Medicine">General Medicine</option>
                    </select>
                </div>
                <div class="form-group">
                    <label for="doctorPhone">Phone</label>
                    <input type="tel" id="doctorPhone" placeholder="Enter phone number">
                </div>
                <div class="form-group">
                    <label for="doctorEmail">Email</label>
                    <input type="email" id="doctorEmail" placeholder="Enter email">
                </div>
                <div class="form-group">
                    <label for="doctorExperience">Experience (Years)</label>
                    <input type="number" id="doctorExperience" placeholder="Enter years of experience">
                </div>
                <div class="form-group">
                    <label for="doctorSchedule">Schedule</label>
                    <input type="text" id="doctorSchedule" placeholder="e.g., Mon-Fri 9AM-5PM">
                </div>
            </div>
            
            <button class="btn" onclick="addDoctor()">Add Doctor</button>
            
            <input type="text" id="doctorSearch" class="search-box" placeholder="Search doctors..." oninput="searchDoctors()">
            
            <table class="data-table" id="doctorsTable">
                <thead>
                    <tr>
                        <th>ID</th>
                        <th>Name</th>
                        <th>Specialty</th>
                        <th>Phone</th>
                        <th>Email</th>
                        <th>Experience</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody id="doctorsTableBody">
                </tbody>
            </table>
        </div>

        <!-- Appointments Tab -->
        <div id="appointments" class="tab-content">
            <h2>Appointment Management</h2>
            
            <div class="form-grid">
                <div class="form-group">
                    <label for="appointmentPatient">Patient</label>
                    <select id="appointmentPatient">
                        <option value="">Select Patient</option>
                    </select>
                </div>
                <div class="form-group">
                    <label for="appointmentDoctor">Doctor</label>
                    <select id="appointmentDoctor">
                        <option value="">Select Doctor</option>
                    </select>
                </div>
                <div class="form-group">
                    <label for="appointmentDate">Date</label>
                    <input type="date" id="appointmentDate">
                </div>
                <div class="form-group">
                    <label for="appointmentTime">Time</label>
                    <input type="time" id="appointmentTime">
                </div>
                <div class="form-group">
                    <label for="appointmentType">Type</label>
                    <select id="appointmentType">
                        <option value="">Select Type</option>
                        <option value="Consultation">Consultation</option>
                        <option value="Follow-up">Follow-up</option>
                        <option value="Emergency">Emergency</option>
                        <option value="Routine Check">Routine Check</option>
                    </select>
                </div>
                <div class="form-group">
                    <label for="appointmentNotes">Notes</label>
                    <textarea id="appointmentNotes" placeholder="Enter notes" rows="3"></textarea>
                </div>
            </div>
            
            <button class="btn" onclick="addAppointment()">Schedule Appointment</button>
            
            <input type="text" id="appointmentSearch" class="search-box" placeholder="Search appointments..." oninput="searchAppointments()">
            
            <table class="data-table" id="appointmentsTable">
                <thead>
                    <tr>
                        <th>ID</th>
                        <th>Patient</th>
                        <th>Doctor</th>
                        <th>Date</th>
                        <th>Time</th>
                        <th>Type</th>
                        <th>Status</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody id="appointmentsTableBody">
                </tbody>
            </table>
        </div>

        <!-- Medical Records Tab -->
        <div id="records" class="tab-content">
            <h2>Medical Records</h2>
            
            <div class="form-grid">
                <div class="form-group">
                    <label for="recordPatient">Patient</label>
                    <select id="recordPatient">
                        <option value="">Select Patient</option>
                    </select>
                </div>
                <div class="form-group">
                    <label for="recordDoctor">Doctor</label>
                    <select id="recordDoctor">
                        <option value="">Select Doctor</option>
                    </select>
                </div>
                <div class="form-group">
                    <label for="recordDate">Date</label>
                    <input type="date" id="recordDate">
                </div>
                <div class="form-group">
                    <label for="recordDiagnosis">Diagnosis</label>
                    <input type="text" id="recordDiagnosis" placeholder="Enter diagnosis">
                </div>
                <div class="form-group">
                    <label for="recordTreatment">Treatment</label>
                    <textarea id="recordTreatment" placeholder="Enter treatment details" rows="3"></textarea>
                </div>
                <div class="form-group">
                    <label for="recordPrescription">Prescription</label>
                    <textarea id="recordPrescription" placeholder="Enter prescription" rows="3"></textarea>
                </div>
            </div>
            
            <button class="btn" onclick="addMedicalRecord()">Add Medical Record</button>
            
            <input type="text" id="recordSearch" class="search-box" placeholder="Search medical records..." oninput="searchRecords()">
            
            <table class="data-table" id="recordsTable">
                <thead>
                    <tr>
                        <th>ID</th>
                        <th>Patient</th>
                        <th>Doctor</th>
                        <th>Date</th>
                        <th>Diagnosis</th>
                        <th>Treatment</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody id="recordsTableBody">
                </tbody>
            </table>
        </div>

        <!-- SQL Console Tab -->
        <div id="sql" class="tab-content">
            <h2>SQL Console</h2>
            <p>Execute SQL queries on the hospital database (simulation)</p>
            
            <div class="form-group">
                <label for="sqlQuery">SQL Query</label>
                <textarea id="sqlQuery" rows="6" placeholder="Enter your SQL query here...
Examples:
SELECT * FROM patients WHERE age > 30;
SELECT d.name, d.specialty FROM doctors d;
SELECT p.name, a.date FROM patients p JOIN appointments a ON p.id = a.patient_id;"></textarea>
            </div>
            
            <button class="btn" onclick="executeSQLQuery()">Execute Query</button>
            <button class="btn" onclick="showDatabaseSchema()">Show Schema</button>
            
            <div id="sqlResults" style="margin-top: 20px;">
                <h3>Database Schema:</h3>
                <pre id="schemaDisplay">
Tables:
1. patients (id, name, age, gender, phone, email, address, created_at)
2. doctors (id, name, specialty, phone, email, experience, schedule, created_at)
3. appointments (id, patient_id, doctor_id, date, time, type, status, notes, created_at)
4. medical_records (id, patient_id, doctor_id, date, diagnosis, treatment, prescription, created_at)
                </pre>
            </div>
        </div>
    </div>

    <!-- Modal for editing records -->
    <div id="editModal" class="modal">
        <div class="modal-content">
            <span class="close" onclick="closeModal()">&times;</span>
            <h2 id="modalTitle">Edit Record</h2>
            <div id="modalContent"></div>
            <div style="text-align: center; margin-top: 20px;">
                <button class="btn" onclick="saveEdit()">Save Changes</button>
                <button class="btn btn-danger" onclick="closeModal()">Cancel</button>
            </div>
        </div>
    </div>

    <script>
        // Database simulation using localStorage-like in-memory storage
        let hospitalDB = {
            patients: [],
            doctors: [],
            appointments: [],
            medicalRecords: []
        };

        let currentEditId = null;
        let currentEditType = null;

        // Initialize the system
        function initializeSystem() {
            loadSampleData();
            updateDashboard();
            updateDropdowns();
            displayAllTables();
        }

        // Load comprehensive sample data with 10 patients
        function loadSampleData() {
            if (hospitalDB.patients.length === 0) {
                // 10 diverse patients with comprehensive data
                hospitalDB.patients = [
                    {id: 1, name: "John Smith", age: 35, gender: "Male", phone: "555-0101", email: "john.smith@email.com", address: "123 Main St, New York, NY", created_at: new Date('2024-01-15').toISOString()},
                    {id: 2, name: "Sarah Johnson", age: 28, gender: "Female", phone: "555-0102", email: "sarah.johnson@email.com", address: "456 Oak Ave, Los Angeles, CA", created_at: new Date('2024-02-20').toISOString()},
                    {id: 3, name: "Mike Davis", age: 42, gender: "Male", phone: "555-0103", email: "mike.davis@email.com", address: "789 Pine Rd, Chicago, IL", created_at: new Date('2024-03-10').toISOString()},
                    {id: 4, name: "Emily Rodriguez", age: 31, gender: "Female", phone: "555-0104", email: "emily.rodriguez@email.com", address: "321 Elm St, Houston, TX", created_at: new Date('2024-04-05').toISOString()},
                    {id: 5, name: "David Kim", age: 29, gender: "Male", phone: "555-0105", email: "david.kim@email.com", address: "654 Maple Dr, Phoenix, AZ", created_at: new Date('2024-05-12').toISOString()},
                    {id: 6, name: "Jessica Brown", age: 38, gender: "Female", phone: "555-0106", email: "jessica.brown@email.com", address: "987 Cedar Ln, Philadelphia, PA", created_at: new Date('2024-06-18').toISOString()},
                    {id: 7, name: "Robert Wilson", age: 45, gender: "Male", phone: "555-0107", email: "robert.wilson@email.com", address: "147 Birch Ave, San Antonio, TX", created_at: new Date('2024-07-03').toISOString()},
                    {id: 8, name: "Maria Garcia", age: 33, gender: "Female", phone: "555-0108", email: "maria.garcia@email.com", address: "258 Spruce St, San Diego, CA", created_at: new Date('2024-07-22').toISOString()},
                    {id: 9, name: "James Anderson", age: 52, gender: "Male", phone: "555-0109", email: "james.anderson@email.com", address: "369 Willow Way, Dallas, TX", created_at: new Date('2024-08-01').toISOString()},
                    {id: 10, name: "Lisa Thompson", age: 27, gender: "Female", phone: "555-0110", email: "lisa.thompson@email.com", address: "741 Ash Blvd, San Jose, CA", created_at: new Date('2024-08-02').toISOString()}
                ];

                // 6 doctors with different specialties
                hospitalDB.doctors = [
                    {id: 1, name: "Dr. Emily Wilson", specialty: "Cardiology", phone: "555-0201", email: "emily.wilson@hospital.com", experience: 15, schedule: "Mon-Fri 9AM-5PM", created_at: new Date('2023-01-01').toISOString()},
                    {id: 2, name: "Dr. Robert Chen", specialty: "Neurology", phone: "555-0202", email: "robert.chen@hospital.com", experience: 12, schedule: "Tue-Sat 8AM-4PM", created_at: new Date('2023-02-01').toISOString()},
                    {id: 3, name: "Dr. Lisa Brown", specialty: "Pediatrics", phone: "555-0203", email: "lisa.brown@hospital.com", experience: 8, schedule: "Mon-Thu 10AM-6PM", created_at: new Date('2023-03-01').toISOString()},
                    {id: 4, name: "Dr. Michael Torres", specialty: "Orthopedics", phone: "555-0204", email: "michael.torres@hospital.com", experience: 18, schedule: "Mon-Fri 7AM-3PM", created_at: new Date('2023-04-01').toISOString()},
                    {id: 5, name: "Dr. Amanda Foster", specialty: "Dermatology", phone: "555-0205", email: "amanda.foster@hospital.com", experience: 10, schedule: "Wed-Sun 11AM-7PM", created_at: new Date('2023-05-01').toISOString()},
                    {id: 6, name: "Dr. Kevin Park", specialty: "General Medicine", phone: "555-0206", email: "kevin.park@hospital.com", experience: 14, schedule: "Mon-Fri 8AM-6PM", created_at: new Date('2023-06-01').toISOString()}
                ];

                // Multiple appointments connecting patients and doctors
                hospitalDB.appointments = [
                    {id: 1, patient_id: 1, doctor_id: 1, date: "2025-08-05", time: "10:00", type: "Consultation", status: "Scheduled", notes: "Regular cardiac checkup", created_at: new Date().toISOString()},
                    {id: 2, patient_id: 2, doctor_id: 2, date: "2025-08-02", time: "14:30", type: "Follow-up", status: "Scheduled", notes: "Follow-up on migraine treatment", created_at: new Date().toISOString()},
                    {id: 3, patient_id: 3, doctor_id: 4, date: "2025-08-03", time: "09:15", type: "Consultation", status: "Scheduled", notes: "Knee pain evaluation", created_at: new Date().toISOString()},
                    {id: 4, patient_id: 4, doctor_id: 5, date: "2025-08-04", time: "11:00", type: "Routine Check", status: "Scheduled", notes: "Annual skin examination", created_at: new Date().toISOString()},
                    {id: 5, patient_id: 5, doctor_id: 6, date: "2025-08-02", time: "16:00", type: "Consultation", status: "Scheduled", notes: "General health assessment", created_at: new Date().toISOString()},
                    {id: 6, patient_id: 6, doctor_id: 1, date: "2025-08-06", time: "13:30", type: "Follow-up", status: "Scheduled", notes: "Blood pressure monitoring", created_at: new Date().toISOString()},
                    {id: 7, patient_id: 7, doctor_id: 3, date: "2025-08-07", time: "15:45", type: "Emergency", status: "Scheduled", notes: "Chest pain evaluation", created_at: new Date().toISOString()},
                    {id: 8, patient_id: 8, doctor_id: 2, date: "2025-08-08", time: "12:00", type: "Consultation", status: "Scheduled", notes: "Headache consultation", created_at: new Date().toISOString()},
                    {id: 9, patient_id: 9, doctor_id: 4, date: "2025-08-09", time: "08:30", type: "Follow-up", status: "Scheduled", notes: "Post-surgery checkup", created_at: new Date().toISOString()},
                    {id: 10, patient_id: 10, doctor_id: 6, date: "2025-08-10", time: "10:30", type: "Routine Check", status: "Scheduled", notes: "Annual physical exam", created_at: new Date().toISOString()}
                ];

                // Comprehensive medical records
                hospitalDB.medicalRecords = [
                    {id: 1, patient_id: 1, doctor_id: 1, date: "2025-07-15", diagnosis: "Hypertension", treatment: "Lifestyle changes and medication", prescription: "Lisinopril 10mg daily, low sodium diet", created_at: new Date().toISOString()},
                    {id: 2, patient_id: 2, doctor_id: 2, date: "2025-07-20", diagnosis: "Chronic Migraines", treatment: "Preventive medication and lifestyle modifications", prescription: "Sumatriptan 50mg as needed, Propranolol 40mg daily", created_at: new Date().toISOString()},
                    {id: 3, patient_id: 3, doctor_id: 4, date: "2025-07-25", diagnosis: "Osteoarthritis", treatment: "Physical therapy and pain management", prescription: "Ibuprofen 400mg TID, Physical therapy 3x/week", created_at: new Date().toISOString()},
                    {id: 4, patient_id: 4, doctor_id: 5, date: "2025-07-28", diagnosis: "Eczema", treatment: "Topical corticosteroids and moisturizers", prescription: "Hydrocortisone 1% cream BID, CeraVe moisturizer", created_at: new Date().toISOString()},
                    {id: 5, patient_id: 5, doctor_id: 6, date: "2025-07-30", diagnosis: "Vitamin D Deficiency", treatment: "Vitamin D supplementation", prescription: "Vitamin D3 2000 IU daily", created_at: new Date().toISOString()},
                    {id: 6, patient_id: 6, doctor_id: 1, date: "2025-08-01", diagnosis: "Pre-hypertension", treatment: "Lifestyle modifications and monitoring", prescription: "Regular BP monitoring, DASH diet", created_at: new Date().toISOString()}
                ];
            }
        }

        // Tab switching
        function showTab(tabName) {
            // Hide all tabs
            document.querySelectorAll('.tab-content').forEach(tab => {
                tab.classList.remove('active');
            });
            
            // Remove active class from all buttons
            document.querySelectorAll('.tab-btn').forEach(btn => {
                btn.classList.remove('active');
            });
            
            // Show selected tab
            document.getElementById(tabName).classList.add('active');
            
            // Add active class to clicked button
            event.target.classList.add('active');
            
            // Update data when switching tabs
            if (tabName === 'dashboard') {
                updateDashboard();
            } else if (tabName === 'patients') {
                displayPatients();
            } else if (tabName === 'doctors') {
                displayDoctors();
            } else if (tabName === 'appointments') {
                displayAppointments();
                updateDropdowns();
            } else if (tabName === 'records') {
                displayMedicalRecords();
                updateDropdowns();
            }
        }

        // Update dashboard statistics
        function updateDashboard() {
            document.getElementById('totalPatients').textContent = hospitalDB.patients.length;
            document.getElementById('totalDoctors').textContent = hospitalDB.doctors.length;
            document.getElementById('totalAppointments').textContent = hospitalDB.appointments.length;
            
            // Count today's appointments
            const today = new Date().toISOString().split('T')[0];
            const todayAppointments = hospitalDB.appointments.filter(apt => apt.date === today).length;
            document.getElementById('todayAppointments').textContent = todayAppointments;
        }

        // Update dropdown menus
        function updateDropdowns() {
            // Update patient dropdowns
            const patientDropdowns = ['appointmentPatient', 'recordPatient'];
            patientDropdowns.forEach(dropdownId => {
                const dropdown = document.getElementById(dropdownId);
                dropdown.innerHTML = '<option value="">Select Patient</option>';
                hospitalDB.patients.forEach(patient => {
                    dropdown.innerHTML += `<option value="${patient.id}">${patient.name}</option>`;
                });
            });

            // Update doctor dropdowns
            const doctorDropdowns = ['appointmentDoctor', 'recordDoctor'];
            doctorDropdowns.forEach(dropdownId => {
                const dropdown = document.getElementById(dropdownId);
                dropdown.innerHTML = '<option value="">Select Doctor</option>';
                hospitalDB.doctors.forEach(doctor => {
                    dropdown.innerHTML += `<option value="${doctor.id}">${doctor.name} - ${doctor.specialty}</option>`;
                });
            });
        }

        // Patient management functions
        function addPatient() {
            const name = document.getElementById('patientName').value;
            const age = document.getElementById('patientAge').value;
            const gender = document.getElementById('patientGender').value;
            const phone = document.getElementById('patientPhone').value;
            const email = document.getElementById('patientEmail').value;
            const address = document.getElementById('patientAddress').value;

            if (!name || !age || !gender || !phone) {
                alert('Please fill in all required fields');
                return;
            }

            const newPatient = {
                id: hospitalDB.patients.length + 1,
                name, age: parseInt(age), gender, phone, email, address,
                created_at: new Date().toISOString()
            };

            hospitalDB.patients.push(newPatient);
            clearPatientForm();
            displayPatients();
            updateDashboard();
            updateDropdowns();
            alert('Patient added successfully!');
        }

        function clearPatientForm() {
            document.getElementById('patientName').value = '';
            document.getElementById('patientAge').value = '';
            document.getElementById('patientGender').value = '';
            document.getElementById('patientPhone').value = '';
            document.getElementById('patientEmail').value = '';
            document.getElementById('patientAddress').value = '';
        }

        function displayPatients() {
            const tbody = document.getElementById('patientsTableBody');
            tbody.innerHTML = '';

            hospitalDB.patients.forEach(patient => {
                const row = `
                    <tr>
                        <td>${patient.id}</td>
                        <td>${patient.name}</td>
                        <td>${patient.age}</td>
                        <td>${patient.gender}</td>
                        <td>${patient.phone}</td>
                        <td>${patient.email}</td>
                        <td>
                            <button class="btn" onclick="editRecord('patient', ${patient.id})">Edit</button>
                            <button class="btn btn-danger" onclick="deleteRecord('patient', ${patient.id})">Delete</button>
                        </td>
                    </tr>
                `;
                tbody.innerHTML += row;
            });
        }

        function searchPatients() {
            const searchTerm = document.getElementById('patientSearch').value.toLowerCase();
            const filteredPatients = hospitalDB.patients.filter(patient => 
                patient.name.toLowerCase().includes(searchTerm) ||
                patient.phone.includes(searchTerm) ||
                patient.email.toLowerCase().includes(searchTerm)
            );
            displayFilteredPatients(filteredPatients);
        }

        function displayFilteredPatients(patients) {
            const tbody = document.getElementById('patientsTableBody');
            tbody.innerHTML = '';

            patients.forEach(patient => {
                const row = `
                    <tr>
                        <td>${patient.id}</td>
                        <td>${patient.name}</td>
                        <td>${patient.age}</td>
                        <td>${patient.gender}</td>
                        <td>${patient.phone}</td>
                        <td>${patient.email}</td>
                        <td>
                            <button class="btn" onclick="editRecord('patient', ${patient.id})">Edit</button>
                            <button class="btn btn-danger" onclick="deleteRecord('patient', ${patient.id})">Delete</button>
                        </td>
                    </tr>
                `;
                tbody.innerHTML += row;
            });
        }

        // Doctor management functions
        function addDoctor() {
            const name = document.getElementById('doctorName').value;
            const specialty = document.getElementById('doctorSpecialty').value;
            const phone = document.getElementById('doctorPhone').value;
            const email = document.getElementById('doctorEmail').value;
            const experience = document.getElementById('doctorExperience').value;
            const schedule = document.getElementById('doctorSchedule').value;

            if (!name || !specialty || !phone || !experience) {
                alert('Please fill in all required fields');
                return;
            }

            const newDoctor = {
                id: hospitalDB.doctors.length + 1,
                name, specialty, phone, email, experience: parseInt(experience), schedule,
                created_at: new Date().toISOString()
            };

            hospitalDB.doctors.push(newDoctor);
            clearDoctorForm();
            displayDoctors();
            updateDashboard();
            updateDropdowns();
            alert('Doctor added successfully!');
        }

        function clearDoctorForm() {
            document.getElementById('doctorName').value = '';
            document.getElementById('doctorSpecialty').value = '';
            document.getElementById('doctorPhone').value = '';
            document.getElementById('doctorEmail').value = '';
            document.getElementById('doctorExperience').value = '';
            document.getElementById('doctorSchedule').value = '';
        }

        function displayDoctors() {
            const tbody = document.getElementById('doctorsTableBody');
            tbody.innerHTML = '';

            hospitalDB.doctors.forEach(doctor => {
                const row = `
                    <tr>
                        <td>${doctor.id}</td>
                        <td>${doctor.name}</td>
                        <td>${doctor.specialty}</td>
                        <td>${doctor.phone}</td>
                        <td>${doctor.email}</td>
                        <td>${doctor.experience} years</td>
                        <td>
                            <button class="btn" onclick="editRecord('doctor', ${doctor.id})">Edit</button>
                            <button class="btn btn-danger" onclick="deleteRecord('doctor', ${doctor.id})">Delete</button>
                        </td>
                    </tr>
                `;
                tbody.innerHTML += row;
            });
        }

        function searchDoctors() {
            const searchTerm = document.getElementById('doctorSearch').value.toLowerCase();
            const filteredDoctors = hospitalDB.doctors.filter(doctor => 
                doctor.name.toLowerCase().includes(searchTerm) ||
                doctor.specialty.toLowerCase().includes(searchTerm) ||
                doctor.phone.includes(searchTerm)
            );
            displayFilteredDoctors(filteredDoctors);
        }

        function displayFilteredDoctors(doctors) {
            const tbody = document.getElementById('doctorsTableBody');
            tbody.innerHTML = '';

            doctors.forEach(doctor => {
                const row = `
                    <tr>
                        <td>${doctor.id}</td>
                        <td>${doctor.name}</td>
                        <td>${doctor.specialty}</td>
                        <td>${doctor.phone}</td>
                        <td>${doctor.email}</td>
                        <td>${doctor.experience} years</td>
                        <td>
                            <button class="btn" onclick="editRecord('doctor', ${doctor.id})">Edit</button>
                            <button class="btn btn-danger" onclick="deleteRecord('doctor', ${doctor.id})">Delete</button>
                        </td>
                    </tr>
                `;
                tbody.innerHTML += row;
            });
        }

        // Appointment management functions
        function addAppointment() {
            const patientId = document.getElementById('appointmentPatient').value;
            const doctorId = document.getElementById('appointmentDoctor').value;
            const date = document.getElementById('appointmentDate').value;
            const time = document.getElementById('appointmentTime').value;
            const type = document.getElementById('appointmentType').value;
            const notes = document.getElementById('appointmentNotes').value;

            if (!patientId || !doctorId || !date || !time || !type) {
                alert('Please fill in all required fields');
                return;
            }

            const newAppointment = {
                id: hospitalDB.appointments.length + 1,
                patient_id: parseInt(patientId),
                doctor_id: parseInt(doctorId),
                date, time, type, status: "Scheduled", notes,
                created_at: new Date().toISOString()
            };

            hospitalDB.appointments.push(newAppointment);
            clearAppointmentForm();
            displayAppointments();
            updateDashboard();
            alert('Appointment scheduled successfully!');
        }

        function clearAppointmentForm() {
            document.getElementById('appointmentPatient').value = '';
            document.getElementById('appointmentDoctor').value = '';
            document.getElementById('appointmentDate').value = '';
            document.getElementById('appointmentTime').value = '';
            document.getElementById('appointmentType').value = '';
            document.getElementById('appointmentNotes').value = '';
        }

        function displayAppointments() {
            const tbody = document.getElementById('appointmentsTableBody');
            tbody.innerHTML = '';

            hospitalDB.appointments.forEach(appointment => {
                const patient = hospitalDB.patients.find(p => p.id === appointment.patient_id);
                const doctor = hospitalDB.doctors.find(d => d.id === appointment.doctor_id);
                
                const row = `
                    <tr>
                        <td>${appointment.id}</td>
                        <td>${patient ? patient.name : 'Unknown'}</td>
                        <td>${doctor ? doctor.name : 'Unknown'}</td>
                        <td>${appointment.date}</td>
                        <td>${appointment.time}</td>
                        <td>${appointment.type}</td>
                        <td><span class="status-badge status-scheduled">${appointment.status}</span></td>
                        <td>
                            <button class="btn" onclick="editRecord('appointment', ${appointment.id})">Edit</button>
                            <button class="btn btn-danger" onclick="deleteRecord('appointment', ${appointment.id})">Cancel</button>
                        </td>
                    </tr>
                `;
                tbody.innerHTML += row;
            });
        }

        function searchAppointments() {
            const searchTerm = document.getElementById('appointmentSearch').value.toLowerCase();
            const filteredAppointments = hospitalDB.appointments.filter(appointment => {
                const patient = hospitalDB.patients.find(p => p.id === appointment.patient_id);
                const doctor = hospitalDB.doctors.find(d => d.id === appointment.doctor_id);
                
                return (patient && patient.name.toLowerCase().includes(searchTerm)) ||
                       (doctor && doctor.name.toLowerCase().includes(searchTerm)) ||
                       appointment.type.toLowerCase().includes(searchTerm) ||
                       appointment.date.includes(searchTerm);
            });
            displayFilteredAppointments(filteredAppointments);
        }

        function displayFilteredAppointments(appointments) {
            const tbody = document.getElementById('appointmentsTableBody');
            tbody.innerHTML = '';

            appointments.forEach(appointment => {
                const patient = hospitalDB.patients.find(p => p.id === appointment.patient_id);
                const doctor = hospitalDB.doctors.find(d => d.id === appointment.doctor_id);
                
                const row = `
                    <tr>
                        <td>${appointment.id}</td>
                        <td>${patient ? patient.name : 'Unknown'}</td>
                        <td>${doctor ? doctor.name : 'Unknown'}</td>
                        <td>${appointment.date}</td>
                        <td>${appointment.time}</td>
                        <td>${appointment.type}</td>
                        <td><span class="status-badge status-scheduled">${appointment.status}</span></td>
                        <td>
                            <button class="btn" onclick="editRecord('appointment', ${appointment.id})">Edit</button>
                            <button class="btn btn-danger" onclick="deleteRecord('appointment', ${appointment.id})">Cancel</button>
                        </td>
                    </tr>
                `;
                tbody.innerHTML += row;
            });
        }

        // Medical Records management functions
        function addMedicalRecord() {
            const patientId = document.getElementById('recordPatient').value;
            const doctorId = document.getElementById('recordDoctor').value;
            const date = document.getElementById('recordDate').value;
            const diagnosis = document.getElementById('recordDiagnosis').value;
            const treatment = document.getElementById('recordTreatment').value;
            const prescription = document.getElementById('recordPrescription').value;

            if (!patientId || !doctorId || !date || !diagnosis) {
                alert('Please fill in all required fields');
                return;
            }

            const newRecord = {
                id: hospitalDB.medicalRecords.length + 1,
                patient_id: parseInt(patientId),
                doctor_id: parseInt(doctorId),
                date, diagnosis, treatment, prescription,
                created_at: new Date().toISOString()
            };

            hospitalDB.medicalRecords.push(newRecord);
            clearMedicalRecordForm();
            displayMedicalRecords();
            alert('Medical record added successfully!');
        }

        function clearMedicalRecordForm() {
            document.getElementById('recordPatient').value = '';
            document.getElementById('recordDoctor').value = '';
            document.getElementById('recordDate').value = '';
            document.getElementById('recordDiagnosis').value = '';
            document.getElementById('recordTreatment').value = '';
            document.getElementById('recordPrescription').value = '';
        }

        function displayMedicalRecords() {
            const tbody = document.getElementById('recordsTableBody');
            tbody.innerHTML = '';

            hospitalDB.medicalRecords.forEach(record => {
                const patient = hospitalDB.patients.find(p => p.id === record.patient_id);
                const doctor = hospitalDB.doctors.find(d => d.id === record.doctor_id);
                
                const row = `
                    <tr>
                        <td>${record.id}</td>
                        <td>${patient ? patient.name : 'Unknown'}</td>
                        <td>${doctor ? doctor.name : 'Unknown'}</td>
                        <td>${record.date}</td>
                        <td>${record.diagnosis}</td>
                        <td>${record.treatment}</td>
                        <td>
                            <button class="btn" onclick="editRecord('record', ${record.id})">Edit</button>
                            <button class="btn btn-danger" onclick="deleteRecord('record', ${record.id})">Delete</button>
                        </td>
                    </tr>
                `;
                tbody.innerHTML += row;
            });
        }

        function searchRecords() {
            const searchTerm = document.getElementById('recordSearch').value.toLowerCase();
            const filteredRecords = hospitalDB.medicalRecords.filter(record => {
                const patient = hospitalDB.patients.find(p => p.id === record.patient_id);
                const doctor = hospitalDB.doctors.find(d => d.id === record.doctor_id);
                
                return (patient && patient.name.toLowerCase().includes(searchTerm)) ||
                       (doctor && doctor.name.toLowerCase().includes(searchTerm)) ||
                       record.diagnosis.toLowerCase().includes(searchTerm) ||
                       record.treatment.toLowerCase().includes(searchTerm);
            });
            displayFilteredRecords(filteredRecords);
        }

        function displayFilteredRecords(records) {
            const tbody = document.getElementById('recordsTableBody');
            tbody.innerHTML = '';

            records.forEach(record => {
                const patient = hospitalDB.patients.find(p => p.id === record.patient_id);
                const doctor = hospitalDB.doctors.find(d => d.id === record.doctor_id);
                
                const row = `
                    <tr>
                        <td>${record.id}</td>
                        <td>${patient ? patient.name : 'Unknown'}</td>
                        <td>${doctor ? doctor.name : 'Unknown'}</td>
                        <td>${record.date}</td>
                        <td>${record.diagnosis}</td>
                        <td>${record.treatment}</td>
                        <td>
                            <button class="btn" onclick="editRecord('record', ${record.id})">Edit</button>
                            <button class="btn btn-danger" onclick="deleteRecord('record', ${record.id})">Delete</button>
                        </td>
                    </tr>
                `;
                tbody.innerHTML += row;
            });
        }

        // Generic edit and delete functions
        function editRecord(type, id) {
            currentEditType = type;
            currentEditId = id;
            
            let record, modalContent = '';
            
            switch(type) {
                case 'patient':
                    record = hospitalDB.patients.find(p => p.id === id);
                    modalContent = `
                        <div class="form-group">
                            <label>Name</label>
                            <input type="text" id="editName" value="${record.name}">
                        </div>
                        <div class="form-group">
                            <label>Age</label>
                            <input type="number" id="editAge" value="${record.age}">
                        </div>
                        <div class="form-group">
                            <label>Gender</label>
                            <select id="editGender">
                                <option value="Male" ${record.gender === 'Male' ? 'selected' : ''}>Male</option>
                                <option value="Female" ${record.gender === 'Female' ? 'selected' : ''}>Female</option>
                                <option value="Other" ${record.gender === 'Other' ? 'selected' : ''}>Other</option>
                            </select>
                        </div>
                        <div class="form-group">
                            <label>Phone</label>
                            <input type="tel" id="editPhone" value="${record.phone}">
                        </div>
                        <div class="form-group">
                            <label>Email</label>
                            <input type="email" id="editEmail" value="${record.email}">
                        </div>
                        <div class="form-group">
                            <label>Address</label>
                            <textarea id="editAddress">${record.address}</textarea>
                        </div>
                    `;
                    break;
                case 'doctor':
                    record = hospitalDB.doctors.find(d => d.id === id);
                    modalContent = `
                        <div class="form-group">
                            <label>Name</label>
                            <input type="text" id="editName" value="${record.name}">
                        </div>
                        <div class="form-group">
                            <label>Specialty</label>
                            <select id="editSpecialty">
                                <option value="Cardiology" ${record.specialty === 'Cardiology' ? 'selected' : ''}>Cardiology</option>
                                <option value="Neurology" ${record.specialty === 'Neurology' ? 'selected' : ''}>Neurology</option>
                                <option value="Orthopedics" ${record.specialty === 'Orthopedics' ? 'selected' : ''}>Orthopedics</option>
                                <option value="Pediatrics" ${record.specialty === 'Pediatrics' ? 'selected' : ''}>Pediatrics</option>
                                <option value="Dermatology" ${record.specialty === 'Dermatology' ? 'selected' : ''}>Dermatology</option>
                                <option value="General Medicine" ${record.specialty === 'General Medicine' ? 'selected' : ''}>General Medicine</option>
                            </select>
                        </div>
                        <div class="form-group">
                            <label>Phone</label>
                            <input type="tel" id="editPhone" value="${record.phone}">
                        </div>
                        <div class="form-group">
                            <label>Email</label>
                            <input type="email" id="editEmail" value="${record.email}">
                        </div>
                        <div class="form-group">
                            <label>Experience (Years)</label>
                            <input type="number" id="editExperience" value="${record.experience}">
                        </div>
                        <div class="form-group">
                            <label>Schedule</label>
                            <input type="text" id="editSchedule" value="${record.schedule}">
                        </div>
                    `;
                    break;
                case 'appointment':
                    record = hospitalDB.appointments.find(a => a.id === id);
                    const patients = hospitalDB.patients.map(p => `<option value="${p.id}" ${p.id === record.patient_id ? 'selected' : ''}>${p.name}</option>`).join('');
                    const doctors = hospitalDB.doctors.map(d => `<option value="${d.id}" ${d.id === record.doctor_id ? 'selected' : ''}>${d.name}</option>`).join('');
                    modalContent = `
                        <div class="form-group">
                            <label>Patient</label>
                            <select id="editPatient">${patients}</select>
                        </div>
                        <div class="form-group">
                            <label>Doctor</label>
                            <select id="editDoctor">${doctors}</select>
                        </div>
                        <div class="form-group">
                            <label>Date</label>
                            <input type="date" id="editDate" value="${record.date}">
                        </div>
                        <div class="form-group">
                            <label>Time</label>
                            <input type="time" id="editTime" value="${record.time}">
                        </div>
                        <div class="form-group">
                            <label>Type</label>
                            <select id="editType">
                                <option value="Consultation" ${record.type === 'Consultation' ? 'selected' : ''}>Consultation</option>
                                <option value="Follow-up" ${record.type === 'Follow-up' ? 'selected' : ''}>Follow-up</option>
                                <option value="Emergency" ${record.type === 'Emergency' ? 'selected' : ''}>Emergency</option>
                                <option value="Routine Check" ${record.type === 'Routine Check' ? 'selected' : ''}>Routine Check</option>
                            </select>
                        </div>
                        <div class="form-group">
                            <label>Status</label>
                            <select id="editStatus">
                                <option value="Scheduled" ${record.status === 'Scheduled' ? 'selected' : ''}>Scheduled</option>
                                <option value="Completed" ${record.status === 'Completed' ? 'selected' : ''}>Completed</option>
                                <option value="Cancelled" ${record.status === 'Cancelled' ? 'selected' : ''}>Cancelled</option>
                            </select>
                        </div>
                        <div class="form-group">
                            <label>Notes</label>
                            <textarea id="editNotes">${record.notes}</textarea>
                        </div>
                    `;
                    break;
                case 'record':
                    record = hospitalDB.medicalRecords.find(r => r.id === id);
                    const recordPatients = hospitalDB.patients.map(p => `<option value="${p.id}" ${p.id === record.patient_id ? 'selected' : ''}>${p.name}</option>`).join('');
                    const recordDoctors = hospitalDB.doctors.map(d => `<option value="${d.id}" ${d.id === record.doctor_id ? 'selected' : ''}>${d.name}</option>`).join('');
                    modalContent = `
                        <div class="form-group">
                            <label>Patient</label>
                            <select id="editPatient">${recordPatients}</select>
                        </div>
                        <div class="form-group">
                            <label>Doctor</label>
                            <select id="editDoctor">${recordDoctors}</select>
                        </div>
                        <div class="form-group">
                            <label>Date</label>
                            <input type="date" id="editDate" value="${record.date}">
                        </div>
                        <div class="form-group">
                            <label>Diagnosis</label>
                            <input type="text" id="editDiagnosis" value="${record.diagnosis}">
                        </div>
                        <div class="form-group">
                            <label>Treatment</label>
                            <textarea id="editTreatment">${record.treatment}</textarea>
                        </div>
                        <div class="form-group">
                            <label>Prescription</label>
                            <textarea id="editPrescription">${record.prescription}</textarea>
                        </div>
                    `;
                    break;
            }
            
            document.getElementById('modalTitle').textContent = `Edit ${type.charAt(0).toUpperCase() + type.slice(1)}`;
            document.getElementById('modalContent').innerHTML = modalContent;
            document.getElementById('editModal').style.display = 'block';
        }

        function saveEdit() {
            if (!currentEditType || !currentEditId) return;
            
            switch(currentEditType) {
                case 'patient':
                    const patientIndex = hospitalDB.patients.findIndex(p => p.id === currentEditId);
                    if (patientIndex !== -1) {
                        hospitalDB.patients[patientIndex] = {
                            ...hospitalDB.patients[patientIndex],
                            name: document.getElementById('editName').value,
                            age: parseInt(document.getElementById('editAge').value),
                            gender: document.getElementById('editGender').value,
                            phone: document.getElementById('editPhone').value,
                            email: document.getElementById('editEmail').value,
                            address: document.getElementById('editAddress').value
                        };
                        displayPatients();
                    }
                    break;
                case 'doctor':
                    const doctorIndex = hospitalDB.doctors.findIndex(d => d.id === currentEditId);
                    if (doctorIndex !== -1) {
                        hospitalDB.doctors[doctorIndex] = {
                            ...hospitalDB.doctors[doctorIndex],
                            name: document.getElementById('editName').value,
                            specialty: document.getElementById('editSpecialty').value,
                            phone: document.getElementById('editPhone').value,
                            email: document.getElementById('editEmail').value,
                            experience: parseInt(document.getElementById('editExperience').value),
                            schedule: document.getElementById('editSchedule').value
                        };
                        displayDoctors();
                    }
                    break;
                case 'appointment':
                    const appointmentIndex = hospitalDB.appointments.findIndex(a => a.id === currentEditId);
                    if (appointmentIndex !== -1) {
                        hospitalDB.appointments[appointmentIndex] = {
                            ...hospitalDB.appointments[appointmentIndex],
                            patient_id: parseInt(document.getElementById('editPatient').value),
                            doctor_id: parseInt(document.getElementById('editDoctor').value),
                            date: document.getElementById('editDate').value,
                            time: document.getElementById('editTime').value,
                            type: document.getElementById('editType').value,
                            status: document.getElementById('editStatus').value,
                            notes: document.getElementById('editNotes').value
                        };
                        displayAppointments();
                    }
                    break;
                case 'record':
                    const recordIndex = hospitalDB.medicalRecords.findIndex(r => r.id === currentEditId);
                    if (recordIndex !== -1) {
                        hospitalDB.medicalRecords[recordIndex] = {
                            ...hospitalDB.medicalRecords[recordIndex],
                            patient_id: parseInt(document.getElementById('editPatient').value),
                            doctor_id: parseInt(document.getElementById('editDoctor').value),
                            date: document.getElementById('editDate').value,
                            diagnosis: document.getElementById('editDiagnosis').value,
                            treatment: document.getElementById('editTreatment').value,
                            prescription: document.getElementById('editPrescription').value
                        };
                        displayMedicalRecords();
                    }
                    break;
            }
            
            closeModal();
            updateDashboard();
            updateDropdowns();
            alert('Record updated successfully!');
        }

        function deleteRecord(type, id) {
            if (!confirm(`Are you sure you want to delete this ${type}?`)) return;
            
            switch(type) {
                case 'patient':
                    hospitalDB.patients = hospitalDB.patients.filter(p => p.id !== id);
                    // Also remove related appointments and records
                    hospitalDB.appointments = hospitalDB.appointments.filter(a => a.patient_id !== id);
                    hospitalDB.medicalRecords = hospitalDB.medicalRecords.filter(r => r.patient_id !== id);
                    displayPatients();
                    break;
                case 'doctor':
                    hospitalDB.doctors = hospitalDB.doctors.filter(d => d.id !== id);
                    // Also remove related appointments and records
                    hospitalDB.appointments = hospitalDB.appointments.filter(a => a.doctor_id !== id);
                    hospitalDB.medicalRecords = hospitalDB.medicalRecords.filter(r => r.doctor_id !== id);
                    displayDoctors();
                    break;
                case 'appointment':
                    hospitalDB.appointments = hospitalDB.appointments.filter(a => a.id !== id);
                    displayAppointments();
                    break;
                case 'record':
                    hospitalDB.medicalRecords = hospitalDB.medicalRecords.filter(r => r.id !== id);
                    displayMedicalRecords();
                    break;
            }
            
            updateDashboard();
            updateDropdowns();
            alert(`${type.charAt(0).toUpperCase() + type.slice(1)} deleted successfully!`);
        }

        function closeModal() {
            document.getElementById('editModal').style.display = 'none';
            currentEditId = null;
            currentEditType = null;
        }

        // SQL Console functions
        function executeSQLQuery() {
            const query = document.getElementById('sqlQuery').value.trim().toLowerCase();
            const resultsDiv = document.getElementById('sqlResults');
            
            if (!query) {
                resultsDiv.innerHTML = '<p style="color: red;">Please enter a SQL query.</p>';
                return;
            }
            
            let results = '';
            
            try {
                if (query.includes('select * from patients')) {
                    results = generateTable('Patients', hospitalDB.patients, ['id', 'name', 'age', 'gender', 'phone', 'email', 'address']);
                } else if (query.includes('select * from doctors')) {
                    results = generateTable('Doctors', hospitalDB.doctors, ['id', 'name', 'specialty', 'phone', 'email', 'experience', 'schedule']);
                } else if (query.includes('select * from appointments')) {
                    const appointmentsWithNames = hospitalDB.appointments.map(apt => {
                        const patient = hospitalDB.patients.find(p => p.id === apt.patient_id);
                        const doctor = hospitalDB.doctors.find(d => d.id === apt.doctor_id);
                        return {
                            ...apt,
                            patient_name: patient ? patient.name : 'Unknown',
                            doctor_name: doctor ? doctor.name : 'Unknown'
                        };
                    });
                    results = generateTable('Appointments', appointmentsWithNames, ['id', 'patient_name', 'doctor_name', 'date', 'time', 'type', 'status']);
                } else if (query.includes('select * from medical_records')) {
                    const recordsWithNames = hospitalDB.medicalRecords.map(record => {
                        const patient = hospitalDB.patients.find(p => p.id === record.patient_id);
                        const doctor = hospitalDB.doctors.find(d => d.id === record.doctor_id);
                        return {
                            ...record,
                            patient_name: patient ? patient.name : 'Unknown',
                            doctor_name: doctor ? doctor.name : 'Unknown'
                        };
                    });
                    results = generateTable('Medical Records', recordsWithNames, ['id', 'patient_name', 'doctor_name', 'date', 'diagnosis', 'treatment']);
                } else if (query.includes('count')) {
                    results = `
                        <h3>Database Statistics:</h3>
                        <p>Total Patients: ${hospitalDB.patients.length}</p>
                        <p>Total Doctors: ${hospitalDB.doctors.length}</p>
                        <p>Total Appointments: ${hospitalDB.appointments.length}</p>
                        <p>Total Medical Records: ${hospitalDB.medicalRecords.length}</p>
                    `;
                } else if (query.includes('join')) {
                    const joinResults = hospitalDB.appointments.map(apt => {
                        const patient = hospitalDB.patients.find(p => p.id === apt.patient_id);
                        const doctor = hospitalDB.doctors.find(d => d.id === apt.doctor_id);
                        return {
                            appointment_id: apt.id,
                            patient_name: patient ? patient.name : 'Unknown',
                            doctor_name: doctor ? doctor.name : 'Unknown',
                            doctor_specialty: doctor ? doctor.specialty : 'Unknown',
                            appointment_date: apt.date,
                            appointment_type: apt.type
                        };
                    });
                    results = generateTable('Join Results', joinResults, ['appointment_id', 'patient_name', 'doctor_name', 'doctor_specialty', 'appointment_date', 'appointment_type']);
                } else {
                    results = `
                        <h3>Query Result:</h3>
                        <p>Simulated SQL query execution. Try these examples:</p>
                        <ul>
                            <li>SELECT * FROM patients;</li>
                            <li>SELECT * FROM doctors;</li>
                            <li>SELECT * FROM appointments;</li>
                            <li>SELECT * FROM medical_records;</li>
                            <li>SELECT COUNT(*) FROM patients;</li>
                            <li>SELECT p.name, a.date FROM patients p JOIN appointments a ON p.id = a.patient_id;</li>
                        </ul>
                    `;
                }
            } catch (error) {
                results = `<p style="color: red;">Error executing query: ${error.message}</p>`;
            }
            
            resultsDiv.innerHTML = results;
        }

        function generateTable(title, data, columns) {
            if (data.length === 0) {
                return `<h3>${title}</h3><p>No data found.</p>`;
            }
            
            let html = `<h3>${title} (${data.length} records)</h3>`;
            html += '<table class="data-table">';
            html += '<thead><tr>';
            columns.forEach(col => {
                html += `<th>${col.replace('_', ' ').toUpperCase()}</th>`;
            });
            html += '</tr></thead><tbody>';
            
            data.forEach(row => {
                html += '<tr>';
                columns.forEach(col => {
                    html += `<td>${row[col] || 'N/A'}</td>`;
                });
                html += '</tr>';
            });
            
            html += '</tbody></table>';
            return html;
        }

        function showDatabaseSchema() {
            const schemaDisplay = document.getElementById('schemaDisplay');
            schemaDisplay.innerHTML = `
Tables and Structure:

1. PATIENTS
   - id (PRIMARY KEY)
   - name (VARCHAR)
   - age (INTEGER)
   - gender (VARCHAR)
   - phone (VARCHAR)
   - email (VARCHAR)
   - address (TEXT)
   - created_at (TIMESTAMP)

2. DOCTORS
   - id (PRIMARY KEY)
   - name (VARCHAR)
   - specialty (VARCHAR)
   - phone (VARCHAR)
   - email (VARCHAR)
   - experience (INTEGER)
   - schedule (VARCHAR)
   - created_at (TIMESTAMP)

3. APPOINTMENTS
   - id (PRIMARY KEY)
   - patient_id (FOREIGN KEY ‚Üí patients.id)
   - doctor_id (FOREIGN KEY ‚Üí doctors.id)
   - date (DATE)
   - time (TIME)
   - type (VARCHAR)
   - status (VARCHAR)
   - notes (TEXT)
   - created_at (TIMESTAMP)

4. MEDICAL_RECORDS
   - id (PRIMARY KEY)
   - patient_id (FOREIGN KEY ‚Üí patients.id)
   - doctor_id (FOREIGN KEY ‚Üí doctors.id)
   - date (DATE)
   - diagnosis (VARCHAR)
   - treatment (TEXT)
   - prescription (TEXT)
   - created_at (TIMESTAMP)

Current Database Status:
- Patients: ${hospitalDB.patients.length} records
- Doctors: ${hospitalDB.doctors.length} records
- Appointments: ${hospitalDB.appointments.length} records
- Medical Records: ${hospitalDB.medicalRecords.length} records
            `;
        }

        function displayAllTables() {
            displayPatients();
            displayDoctors();
            displayAppointments();
            displayMedicalRecords();
        }

        // Initialize the system when page loads
        window.onload = function() {
            initializeSystem();
            
            // Set default date to today for forms
            const today = new Date().toISOString().split('T')[0];
            document.getElementById('appointmentDate').value = today;
            document.getElementById('recordDate').value = today;
        };

        // Close modal when clicking outside
        window.onclick = function(event) {
            const modal = document.getElementById('editModal');
            if (event.target === modal) {
                closeModal();
            }
        };
    </script>
</body>
</html>
                        
